buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forge_gradle_version}", changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

version = "${mc_version}-${mod_version}-${mod_stage}"
group = "meldexun.${mod_id}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

configurations {
    includedDependencies
    implementation.extendsFrom(includedDependencies)
    atDependencies
    implementation.extendsFrom(atDependencies)
}

repositories {
    ivy {
        url 'https://github.com/'

        patternLayout {
            artifact '[organisation]/[module]/releases/download/v[revision]/[module]-[revision].[ext]'
        }

        metadataSources { artifact() } 
    }

    maven { url = 'https://www.cursemaven.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    includedDependencies 'meldexun:ReflectionUtil:1.0.0@jar'
    atDependencies fg.deobf('curse.maven:Waystones-245755:2859589')
    implementation fg.deobf('curse.maven:LycanitesMobs-224770:3649418')
    implementation fg.deobf('curse.maven:ClaimItAPI-324531:2980575')
    implementation fg.deobf('curse.maven:ClaimIt-324532:2980578')
    implementation fg.deobf('curse.maven:CallableHorse-257572:2800372')
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    def atDepFileTree = files(configurations.atDependencies.collect { zipTree(it) }).getAsFileTree()
    accessTransformer = files(
        'src/main/resources/META-INF/accesstransformer.cfg',
        atDepFileTree.matching { include 'META-INF/waystones_at.cfg' }
    )

    runs {
        client {
            taskName "runClient ${mod_name} ${mc_version}"
            environment 'MC_VERSION', "${mc_version}"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
        }

        server {
            taskName "runServer ${mod_name} ${mc_version}"
            environment 'MC_VERSION', "${mc_version}"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
        }
    }
}

processResources {
    inputs.property('version', "${mod_stage}" != "" ? "${mod_version}-${mod_stage}" : "${mod_version}")

    filesMatching('mcmod.info') {
        expand version: inputs.properties.get('version')
    }
}

jar {
    archiveBaseName = mod_name
    archiveAppendix = mc_version
    archiveVersion = mod_version
    archiveClassifier = mod_stage

    from {
        configurations.includedDependencies.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        // attributes 'FMLAT': 'accesstransformer.cfg'
    }
}

jar.finalizedBy('reobfJar')
